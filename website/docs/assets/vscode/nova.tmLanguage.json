{
  "name": "Nova",
  "scopeName": "source.nova",
  "fileTypes": ["nova"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#standalone_keywords" },
    { "include": "#keywords" },
    { "include": "#constructs" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#properties" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "match": "#.*$",
      "name": "comment.line.number-sign.nova"
    },
    "standalone_keywords": {
      "patterns": [
        {
          "match": "(?<!\\.)\\b(train|training)\\b",
          "name": "keyword.control.nova"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(load|data|collection|from|with|apply|create|processing|pipeline|add|transformation|stage|inputs|outputs|activation|on|measure|error|using|improve|repeat|for|learning|cycles|evaluate|report|results|save|to|prepare|stream|batch|size|shuffle|enabled|disable|split|into|testing|print|progress|every|convert|feature|grid)\\b",
          "name": "keyword.control.nova"
        }
      ]
    },
    "constructs": {
      "patterns": [
        {
          "match": "\\b(fully_connected|relu|sigmoid|tanh|softmax|dropout|rate|cross_entropy|binary_cross_entropy|mean_squared_error|adam|gradient_descent|learning|rate|weight|decay|normalization|mean|deviation|accuracy|precision|recall|f1|score)\\b",
          "name": "entity.name.function.nova"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "match": "\"[^\"]*\"",
          "name": "string.quoted.double.nova"
        },
        {
          "match": "'[^']*'",
          "name": "string.quoted.single.nova"
        }
      ]
    },
    "numbers": {
      "match": "\\b\\d+(\\.\\d+)?\\b",
      "name": "constant.numeric.nova"
    },
    "properties": {
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\.(train|test|[a-zA-Z_][a-zA-Z0-9_]*)\\b",
      "captures": {
        "1": { "name": "variable.other.nova" },
        "2": { "name": "variable.property.nova" }
      }
    },
    "variables": {
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
      "name": "variable.other.nova"
    }
  }
}